name: Go Docker CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker compose build app

  lint:
    name: Lint
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker compose build app

      - name: Create app container
        run: docker compose up -d app

      - name: Check code formatting
        run: |
          if ! docker compose exec app sh -c "test -z \$(gofmt -l .)"; then
            echo "Code formatting issues detected:"
            docker compose exec app sh -c "gofmt -l ."
            exit 1
          fi

      - name: Run go vet
        run: docker compose exec app go vet ./...

  test-and-coverage:
    name: Test and Coverage
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker compose build app

      - name: Create app container and copy coverage script
        run: |
          docker compose up -d app
          docker compose exec app sh -c "mkdir -p /app/scripts"
          cat > scripts/coverage.sh << 'EOF'
          #!/bin/sh

          # Run tests and generate coverage profile
          go test ./... -coverprofile=coverage.out -coverpkg='github.com/benidevo/prospector/internal/...' -covermode=set

          # Filter out handlers from the coverage output
          grep -v '/handlers.go' coverage.out > coverage.filtered.out

          # Generate report
          if [ "$1" = "verbose" ]; then
            go tool cover -func=coverage.filtered.out
          else
            go tool cover -func=coverage.filtered.out | grep total:
          fi
          EOF
          chmod +x scripts/coverage.sh
          docker compose cp scripts/coverage.sh app:/app/scripts/coverage.sh

      - name: Run tests with coverage (excluding handlers)
        run: |
          docker compose exec app sh -c "chmod +x /app/scripts/coverage.sh && /app/scripts/coverage.sh verbose"
          docker compose cp app:/app/coverage.filtered.out ./coverage.filtered.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.filtered.out
          flags: unittests

      - name: Check test coverage threshold
        run: |
          MIN_COVERAGE=40.0

          # Run coverage check directly in the container
          COVERAGE=$(docker compose exec app sh -c "go tool cover -func=coverage.filtered.out | grep total: | awk '{print \$3}'" | tr -d '%')
          echo "Code coverage (excluding handlers): $COVERAGE%"

          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "❌ Code coverage is below the threshold of $MIN_COVERAGE%"
            exit 1
          fi
          echo "✅ Coverage threshold met: $COVERAGE% ≥ $MIN_COVERAGE%"

      - name: Clean up Docker resources
        if: always()
        run: docker compose down -v

  summary:
    name: CI Summary
    needs: [build, lint, test-and-coverage]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build job failed"
            exit 1
          fi
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Lint job failed"
            exit 1
          fi
          if [[ "${{ needs.test-and-coverage.result }}" != "success" ]]; then
            echo "Test and coverage job failed"
            exit 1
          fi
          echo "All checks passed successfully!"
