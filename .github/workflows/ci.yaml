name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  TOKEN_SECRET: test-secret-for-ci
  GOOGLE_CLIENT_ID: test-client-id
  GOOGLE_CLIENT_SECRET: test-client-secret

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'

      - name: Build application
        run: go build ./cmd/ascentio

      - name: Build scheduler
        run: go build ./cmd/scheduler

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Check code formatting
        run: |
          if ! test -z $(gofmt -l .); then
            echo "Code formatting issues detected:"
            gofmt -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

  test-and-coverage:
    name: Test and Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run tests with coverage
        run: |
          go test ./... -coverprofile=coverage.out -coverpkg='github.com/benidevo/ascentio/internal/...' -covermode=set
          grep -v '/handlers.go' coverage.out > coverage.filtered.out
          go tool cover -func=coverage.filtered.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.filtered.out
          flags: unittests

  summary:
    name: CI Summary
    needs: [build, lint, test-and-coverage]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build job failed"
            exit 1
          fi
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Lint job failed"
            exit 1
          fi
          if [[ "${{ needs.test-and-coverage.result }}" != "success" ]]; then
            echo "Test and coverage job failed"
            exit 1
          fi
          echo "All checks passed successfully!"
